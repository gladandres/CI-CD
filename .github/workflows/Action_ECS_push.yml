

name: Deploy to Amazon ECS

on:
  push:
    branches:
      - "ci-cd_ECS_python_app"
    
  # pull_request:
  #   types:
  #     - "closed"

env:
  AWS_REGION: eu-west-1                   
  ECR_REPOSITORY: application          # set this to your Amazon ECR repository name
  # ECS_SERVICE: Test_Service                 # set this to your Amazon ECS service name
  # ECS_CLUSTER: ECS-Fargate                 # set this to your Amazon ECS cluster name
  # ECS_TASK_DEFINITION: .aws/task-definition_stage.json # set this to the path to your Amazon ECS task definition
  CONTAINER_NAME: Test           # set this to the name of the container in the


permissions:
  contents: read

jobs:
  deploy_stage:
    name: Deploy Stage
    # if: ${{github.event.issue.push}}
    env:
      ECS_SERVICE: Test_Service                 # set this to your Amazon ECS service name
      ECS_CLUSTER: ECS-Fargate                 # set this to your Amazon ECS cluster name
      ECS_TASK_DEFINITION: .aws/task-definition_stage.json # set this to the path to your Amazon ECS task definition  
      

    runs-on: ubuntu-latest
    environment: test

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}


    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1     
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      if: ${{ github.event.issue.pull_request }}
      env:
        ECS_SERVICE: Prod_Service
        ECS_CLUSTER: ECS-Fargate  
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

